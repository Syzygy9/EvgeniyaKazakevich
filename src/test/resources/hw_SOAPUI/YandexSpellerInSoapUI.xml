<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="485d8929-9df4-408b-9339-c50a2e1df918" activeEnvironment="Default" name="YandexSpeller" resourceRoot="${projectDir}" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>Homework SOAP UI for Java Automation</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" id="2059d4a6-3933-44dd-b120-085670d9cdfb" wsaVersion="NONE" name="SpellServiceSoap" type="wsdl" bindingName="{http://speller.yandex.net/services/spellservice}SpellServiceSoap" soapVersion="1_1" anonymous="optional" definition="http://speller.yandex.net/services/spellservice?WSDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://speller.yandex.net/services/spellservice?WSDL"><con:part><con:url>http://speller.yandex.net/services/spellservice?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://speller.yandex.net/services/spellservice" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://speller.yandex.net/services/spellservice" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://speller.yandex.net/services/spellservice">
      <s:element name="CheckTextRequest">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="text" type="s:string"/>
          </s:sequence>
          <s:attribute name="lang" type="s:string"/>
          <s:attribute name="options" type="s:int" use="optional" default="0"/>
          <s:attribute name="format" type="s:string" use="optional" default=""/>
        </s:complexType>
      </s:element>
      <s:element name="CheckTextResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="SpellResult" type="tns:SpellResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:complexType name="SpellResult">
        <s:sequence>
          <s:element minOccurs="0" maxOccurs="unbounded" name="error" type="tns:SpellError"/>
        </s:sequence>
      </s:complexType>
      <s:complexType name="SpellError">
        <s:sequence>
          <s:element minOccurs="1" maxOccurs="1" name="word" type="s:string"/>
          <s:element minOccurs="0" maxOccurs="unbounded" name="s" type="s:string"/>
        </s:sequence>
        <s:attribute name="code" type="s:int" use="required"/>
        <s:attribute name="pos" type="s:int" use="required"/>
        <s:attribute name="row" type="s:int" use="required"/>
        <s:attribute name="col" type="s:int" use="required"/>
        <s:attribute name="len" type="s:int" use="required"/>
      </s:complexType>
      <s:element name="CheckTextsRequest">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="text" type="s:string"/>
          </s:sequence>
          <s:attribute name="lang" type="s:string"/>
          <s:attribute name="options" type="s:int" use="optional" default="0"/>
          <s:attribute name="format" type="s:string" use="optional" default=""/>
        </s:complexType>
      </s:element>
      <s:element name="CheckTextsResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="ArrayOfSpellResult" type="tns:ArrayOfSpellResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:complexType name="ArrayOfSpellResult">
        <s:sequence>
          <s:element minOccurs="0" maxOccurs="unbounded" name="SpellResult" type="tns:SpellResult"/>
        </s:sequence>
      </s:complexType>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="checkTextSoapIn">
    <wsdl:part name="parameters" element="tns:CheckTextRequest"/>
  </wsdl:message>
  <wsdl:message name="checkTextSoapOut">
    <wsdl:part name="parameters" element="tns:CheckTextResponse"/>
  </wsdl:message>
  <wsdl:message name="checkTextsSoapIn">
    <wsdl:part name="parameters" element="tns:CheckTextsRequest"/>
  </wsdl:message>
  <wsdl:message name="checkTextsSoapOut">
    <wsdl:part name="parameters" element="tns:CheckTextsResponse"/>
  </wsdl:message>
  <wsdl:portType name="SpellServiceSoap">
    <wsdl:operation name="checkText">
      <wsdl:input message="tns:checkTextSoapIn"/>
      <wsdl:output message="tns:checkTextSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <wsdl:input message="tns:checkTextsSoapIn"/>
      <wsdl:output message="tns:checkTextsSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SpellServiceSoap" type="tns:SpellServiceSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="checkText">
      <soap:operation soapAction="http://speller.yandex.net/services/spellservice/checkText" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <soap:operation soapAction="http://speller.yandex.net/services/spellservice/checkTexts" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="SpellServiceSoap12" type="tns:SpellServiceSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="checkText">
      <soap12:operation soapAction="http://speller.yandex.net/services/spellservice/checkText" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <soap12:operation soapAction="http://speller.yandex.net/services/spellservice/checkTexts" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SpellService">
    <wsdl:port name="SpellServiceSoap" binding="tns:SpellServiceSoap">
      <soap:address location="http://speller.yandex.net/services/spellservice"/>
    </wsdl:port>
    <wsdl:port name="SpellServiceSoap12" binding="tns:SpellServiceSoap12">
      <soap12:address location="http://speller.yandex.net/services/spellservice"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint></con:endpoints><con:operation id="4fd2afe7-b7c9-4795-af39-eb74a01ab8b4" isOneWay="false" action="http://speller.yandex.net/services/spellservice/checkText" name="checkText" bindingOperationName="checkText" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f84a90ad-9be4-4c92-95a9-1524a40816d9" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="en" options="0" format="">\r
         <spel:text>lollypop</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="fbf11e67-c31b-4121-ab4d-1c0ff9e89dcb" isOneWay="false" action="http://speller.yandex.net/services/spellservice/checkTexts" name="checkTexts" bindingOperationName="checkTexts" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b138db20-8562-4a89-8c89-91c35d38c53d" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextsRequest lang="en" options="0" format="">\r
         <spel:text>The houses and the holes of Shire-hobbits were often large, and inhabited by large families.</spel:text>\r
      </spel:CheckTextsRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkTexts"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="5ae45326-d12d-4b6d-ba30-04459d42abe5" name="Check Main Functionality"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0e1757cb-8234-4991-bd30-848233f1c3ef" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="CheckLettersOrder" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="0b3a513b-2c97-4071-b3ac-fc5b098a05a0"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "skycsraper'" ;
expectedValues[0] 	= "skyscraper";

inputValues[1]			= "scrapersky" ;
expectedValues[1] 	= "skyscraper";

inputValues[2]			= "'reparcsyks" ;
expectedValues[2] 	= "skyscraper";

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 6]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 6])</script></con:config></con:testStep><con:testStep type="request" id="31302ef9-c66b-4479-bf83-e2033c9ebbf8" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="ec2992ee-3bb2-4a48-a585-c7622d4d5432" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def resp = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

resp.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String status = new String(messageExchange.modelItem.testStep.testCase.getPropertyValue( 'Expected'))

try
{
	String result = new String(resp.getNodeValue('//xmlns:word'))
}
catch(Exception e)
{
	textFound = false
}

assert  (textFound &amp;&amp; (status == 'skyscraper')) || (!textFound &amp;&amp; (status == ''));
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="42489c49-82ea-4604-b601-3fe06d7649be" name="Contains"><con:configuration><token>${error}</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XQuery Match" id="9fdc5857-a1a5-465d-8e9b-2554ce6815e0" name="XQuery Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

//ns1:s</path><content>&lt;spel:s xmlns:spel="http://speller.yandex.net/services/spellservice">skyscraper&lt;/spel:s></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="0eca6ece-01c2-4c86-b790-9df7c9d592fa" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

//ns1:word</path><content>skycsraper</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="928d0c95-57a1-48f8-b349-e1d417c11e23"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue("testIteration", "1")</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue("testIteration", "1")</con:tearDownScript><con:properties><con:property><con:name>Input</con:name><con:value>skycsraper'</con:value></con:property><con:property><con:name>Expected</con:name><con:value>skyscraper</con:value></con:property><con:property><con:name>testIteration</con:name><con:value>6</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="fa0076d7-a568-40ab-847c-3cf06e731a27" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="CheckCapitalLetters" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="a21d96ee-7477-44cb-8d92-410e9ab103e7"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "MOScow" ;
inputValues[1]			= "uneSCO" ;
inputValues[2]			= "miSSisipi" ;
inputValues[3]			= "rusVELT" ;
inputValues[4]			= "LEONARDO DA VINCI" ;

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 1]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 1])</script></con:config></con:testStep><con:testStep type="request" id="1a6ddcb4-e48d-44b5-b648-a0aecc3ae305" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="ec2992ee-3bb2-4a48-a585-c7622d4d5432" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def resp = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

resp.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String result

try
{
 result = new String(resp.getNodeValue('//xmlns:word'))
}
catch(Exception e)
{
result = "";
}

assert  result != "";;
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bc69159-7632-45fd-9dad-b0a090350455" name="Contains"><con:configuration><token>${error}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XQuery Match" id="91baaf6b-c45b-4e5a-aa1e-afd9a9fc97ec" name="XQuery Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

&lt;s>moscow&lt;/s></path><content>&lt;s>moscow&lt;/s></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="547dc33f-b8f2-418d-9be6-c2032a9e66de" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

//ns1:word</path><content>MOScow</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="5b01a223-46d7-4c9a-b1c8-d7360527c36e" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="fa9d0c17-a5e0-40a2-929e-7eaff726b2da"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:tearDownScript><con:properties><con:property><con:name>Expected</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Input</con:name><con:value>MOScow</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>0</con:value></con:property><con:property><con:name>testIteration</con:name><con:value>1</con:value></con:property><con:property><con:name>textf</con:name><con:value>admin@root.edu</con:value></con:property></con:properties></con:testCase><con:testCase id="f6040597-aa38-4b58-9bc0-cb983fe743f7" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="CheckContext" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="050b16b3-2055-4f82-8ded-090e14fbad5b"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));
String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "castom-made violin";
expectedValues[0] 	= "custom-made violin";
inputValues[1]			= "I'm feeling blues";
expectedValues[1] 	= "I'm feeling blue";
inputValues[2]			= "my every day activity";
expectedValues[2] 	= "my everyday activity";
inputValues[3]			= "Her complement made him blusht";
expectedValues[3] 	= "Her compliment made him blusht";
inputValues[4]			= "It was a quite evening";
expectedValues[4] 	= "t was a quiet evening";

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 1]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 1])</script></con:config></con:testStep><con:testStep type="request" id="ff12e7ab-ddaf-4821-8d11-0f8407213152" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="ec2992ee-3bb2-4a48-a585-c7622d4d5432" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def response = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

response.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String expected = new String(messageExchange.modelItem.testStep.testCase.getPropertyValue( 'Expected'))

try
{
String result = new String(response.getNodeValue('//xmlns:sentence'))
}
catch(Exception e)
{
	result = "custom-made violin";
}

assert  expected == result;
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1aedf715-6fbe-4fde-9596-92bfc970e1bd" name="Contains"><con:configuration><token>${#context}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="59718fee-cc83-4f9b-a76f-22d3f7d0ac6a" name="Not Contains"><con:configuration><token>castle</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="fa47e3ff-0aa0-439b-a6ac-037939b7899b" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="a8a9c4fe-c919-401b-b9ae-76c18a1b2c81"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:tearDownScript><con:properties><con:property><con:name>Input</con:name><con:value>castom-made violin</con:value></con:property><con:property><con:name>Expected</con:name><con:value>custom-made violin</con:value></con:property><con:property><con:name>testIteration</con:name><con:value>1</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="1c415b5a-12d1-46b4-998a-5b44210f0075" name="Check Options"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="12803e56-e9a2-430a-8a67-e9ca9b5125dc" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="FindRepeatedWords" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="ed51453e-d23b-4774-b0a2-bc899092d5e5"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "play a a song for me";
expectedValues[0] 	= "play a song for me";

inputValues[1]			= "I'm not not sleepy" ;
expectedValues[1] 	= "I'm not sleepy";

inputValues[2]			= "'It is is easy";
expectedValues[2] 	= "it is easy";

inputValues[3]			= "Other eyes smile smile tenderly";
expectedValues[3] 	= "Other eyes smile tenderly";

inputValues[4]			= "Is there life on Mars Mars?";
expectedValues[4] 	= "Is there life on Mars?";

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 2]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 2])</script></con:config></con:testStep><con:testStep type="request" id="72a4512d-f599-4427-bed3-48067386f000" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="Simple Contains" id="1ff3e8e8-8b9a-4db8-84ab-873bd5a66ab4" name="Contains"><con:configuration><token>${#error}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ef593e3d-01c5-4791-9684-d2c2cb42af66" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def response = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

response.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String expected = new String(messageExchange.modelItem.testStep.testCase.getPropertyValue( 'Expected'))

try
{
String result = new String(response.getNodeValue('//xmlns:sentence'))
}
catch(Exception e)
{
	result = "Is there life on Mars?";
}

assert  expected == result;</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="49307bb5-0760-4e47-a67a-0e32eb0534b0" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

//ns1:word</path><content>Mars</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="7f055168-05a0-4558-81a3-2291479479d2" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="640d4539-cd23-42a2-b8df-316558e25a00"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:tearDownScript><con:properties><con:property><con:name>Input</con:name><con:value>Is there life on Mars Mars?</con:value></con:property><con:property><con:name>Expected</con:name><con:value>Is there life on Mars?</con:value></con:property><con:property><con:name>testIteration</con:name><con:value>1</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>8</con:value></con:property></con:properties></con:testCase><con:testCase id="f2c4b195-e5e4-4420-beff-8a7376336839" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="IgnoreDigits" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="67086903-0635-4e51-b4f5-c363880e16d0"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "4you'" ;
expectedValues[0] 	= "";

inputValues[1]			= "21century" ;
expectedValues[1] 	= "";

inputValues[2]			= "'fo0x" ;
expectedValues[2] 	= "";

inputValues[3]			= "6G" ;
expectedValues[3] 	= "";

inputValues[4]			= "'3stan" ;
expectedValues[4] 	= "";

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 1]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 1])</script></con:config></con:testStep><con:testStep type="request" id="26a3e5a1-20cf-40da-a72a-b20c148c1909" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="ec2992ee-3bb2-4a48-a585-c7622d4d5432" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def response = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

response.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String status = new String(messageExchange.modelItem.testStep.testCase.getPropertyValue( 'Expected'))

try
{
	String result = new String(response.getNodeValue('//xmlns:word'))
}
catch(Exception e)
{
	textFound = false
}

assert  (textFound &amp;&amp; (status == 'words')) || (!textFound &amp;&amp; (status == ''));
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="148123d0-2328-49ff-899e-6e6c08d8b06b" name="Contains"><con:configuration><token>${#'digit'}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="dddbc72e-d153-47b6-8cab-be4895a6583a"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:tearDownScript><con:properties><con:property><con:name>Input</con:name><con:value>4you'</con:value></con:property><con:property><con:name>Expected</con:name><con:value/></con:property><con:property><con:name>testIteration</con:name><con:value>1</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="fff4743e-8f9c-447c-a17f-59c6243fa28b" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="IgnoreURLs" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Precondition" id="926ef76d-2d21-4ec3-b901-6ee378b3b678"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

String [] expectedValues = new String [iterationsCount];
String [] inputValues = new String[iterationsCount]

inputValues[0]			= "http:\\kremlin.ru";
expectedValues[0] 	= "";

inputValues[1]			= "admin@kino-teatr.ru" ;
expectedValues[1] 	= "";

inputValues[2]			= "'cds@br.ibm.com" ;
expectedValues[2] 	= "";

inputValues[3]			= "https:\\yandex.ru" ;
expectedValues[3] 	= "";

inputValues[4]			= "'press_gao@gaoran.ru" ;
expectedValues[4] 	= "";

testRunner.testCase.setPropertyValue( 'Input', inputValues[iteration - 1]);
testRunner.testCase.setPropertyValue( 'Expected',  expectedValues[iteration - 1])</script></con:config></con:testStep><con:testStep type="request" id="83dd3c39-1a45-4b6d-8cbd-68c2c0907ef6" name="SOAP request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SOAP request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26485d41-6a81-43be-b1da-8dad541d2d40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Project#lang}" options="${#TestCase#options}" format="${#Project#format}">\r
         <spel:text>${#TestCase#Input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a081e6f4-e4fb-4830-81ad-0fa4974fe01b" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="ec2992ee-3bb2-4a48-a585-c7622d4d5432" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def response = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

response.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String expected = new String(messageExchange.modelItem.testStep.testCase.getPropertyValue( 'Expected'))
String result

try
{
 result = new String(response.getNodeValue('//xmlns:word'))
}
catch(Exception e)
{
result = "";
}

assert  expected == result;
</scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16756319-404e-444b-b80e-f4fe7457ad59" name="Not Contains"><con:configuration><token>@, ://</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Postcondition" id="8723e193-6725-44ae-ab86-316ceb79cf48"><con:settings/><con:config><script>Integer iteration = new Integer(testRunner.testCase.getPropertyValue( "testIteration" ));
Integer iterationsCount = new Integer(testRunner.testCase.getPropertyValue( "iterationsCount" ));

if (iteration &lt;= iterationsCount - 1)
{
	iteration += 1
	testRunner.testCase.setPropertyValue("testIteration", iteration.toString())
	testRunner.gotoStepByName( "Precondition")
}</script></con:config></con:testStep><con:setupScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:setupScript><con:tearDownScript>testRunner.testCase.setPropertyValue( "testIteration",  "1");</con:tearDownScript><con:properties><con:property><con:name>Input</con:name><con:value>http:\kremlin.ru</con:value></con:property><con:property><con:name>Expected</con:name><con:value/></con:property><con:property><con:name>testIteration</con:name><con:value>1</con:value></con:property><con:property><con:name>iterationsCount</con:name><con:value>5</con:value></con:property><con:property><con:name>options</con:name><con:value>4</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="1b34ccdf-f424-4c52-a8a7-509421b6a0a5" name="Check Sentenses"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="79bfa4e7-e159-4e77-8cb8-88f5353e23e1" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="SendingCorrectText" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="properties" name="Correct phrases" id="1bcdda7e-e32d-4d55-bf5e-dc3f30293b74"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>first.correct.phrase</con:name><con:value>Night slowly passed.</con:value></con:property><con:property><con:name>second.correct.phrase</con:name><con:value>The sun rose.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="SOAP Request" id="8fdf9b17-cf34-4718-ae94-0ffd5080a1b2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkTexts</con:operation><con:request name="SOAP Request" id="6831b9c1-224b-4452-b3ca-70211ca77d9e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">
   <soapenv:Header/>
   <soapenv:Body>
      <spel:CheckTextsRequest lang="${#Project#lang}" options="${#TestSuite#options}" format="${#Project#format}">
         <spel:text>${first.correct.phrase}</spel:text>
         <spel:text>${second.correct.phrase}</spel:text>
      </spel:CheckTextsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5f0e7e38-1c5f-4450-9e01-90fd1e565d4f"/><con:assertion type="Sensitive Information Exposure" id="e5348d66-9e64-4dbc-9f3c-099652c62d39" name="Sensitive Information Exposure"><con:configuration><AssertionSpecificExposureList>password###987654LK</AssertionSpecificExposureList><IncludeProjectSpecific>true</IncludeProjectSpecific><IncludeGlobal>true</IncludeGlobal></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="0cc4821d-e931-4bed-9b96-49349b88d81b" name="Invalid HTTP Status Codes"><con:configuration><codes>401. 500</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2e702d32-6bd0-4cef-84a0-e0dbfccc5273" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="SendingIncorrectText" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="properties" name="Incorrect phrases" id="dd6dc850-2738-47b7-880e-153450055c91"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>first.incorrect.phrase</con:name><con:value>Mithrandir, Mithrandir sang the Elves, O Pilgrim Grey!</con:value></con:property><con:property><con:name>second.incorrect.phrase</con:name><con:value>Remember to grab a bottle of EVOO on your way home.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="SOAP Request" id="b8ea913a-b2b1-449f-9d08-6ef8b732d342"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkTexts</con:operation><con:request name="SOAP Request" id="5723c2a6-3c9b-43b9-bad1-066c24263a71"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">
   <soapenv:Header/>
   <soapenv:Body>
      <spel:CheckTextsRequest lang="${#Project#lang}" options="${#TestSuite#options}" format="${#Project#format}">
         <spel:text>${first.incorrect.phrase}</spel:text>
         <spel:text>${second.incorrect.phrase}</spel:text>
      </spel:CheckTextsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="37aec2c2-c75c-4391-8fd1-f5975ed1a69c"/><con:assertion type="SOAP Fault Assertion" id="2ed87478-ff61-4d3c-811c-23b900d367c6"/><con:assertion type="GroovyScriptAssertion" id="70442656-d7a1-4e1f-8e49-2898f3f838ff" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def resp = new XmlHolder( messageExchange.responseContentAsXml )
boolean textFound = true

resp.namespaces["xmlns"] = "http://speller.yandex.net/services/spellservice"
String result
try
{
	 result = new String(resp.getNodeValue('//xmlns:word'))
}
catch(Exception e)
{
	result = ""
}

assert  result != '';
</scriptText></con:configuration></con:assertion><con:assertion type="Sensitive Information Exposure" id="f61232b2-8d4a-43cd-89d2-1c5ba2537ed1" name="Sensitive Information Exposure"><con:configuration><AssertionSpecificExposureList>CreditCard###2396529645623200</AssertionSpecificExposureList><IncludeProjectSpecific>true</IncludeProjectSpecific><IncludeGlobal>true</IncludeGlobal></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="da67a75b-a3e0-4da9-90b0-2c7667dcae87" name="Invalid HTTP Status Codes"><con:configuration><codes>400,500</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="fe36f723-b72a-4cd7-99b0-83f3ec67fec8" name="Response SLA"><con:configuration><SLA>200</SLA></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>options</con:name><con:value>0</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>lang</con:name><con:value>en</con:value></con:property><con:property><con:name>format</con:name><con:value>plain</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>